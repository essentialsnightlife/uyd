service: uyd
frameworkVersion: "3"
useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ${file(./conf/serverless.yml):AWS_REGION}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:DescribeTable
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [analysedDreams, Arn]
  environment:
    TABLE_NAME:
      Ref: analysedDreams
    OPENAI_API_KEY: ${file(./conf/serverless.yml):OPENAI_API_KEY}
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:3000
        - http://localhost:3001

functions:
  dream-analyser:
    handler: src/domains/ai/functions/handler.analyser
    events:
      - httpApi:
          path: /dreams/analyse
          method: POST
          cors:
            origin: ["https://www.useyourdream.com/","https://uyd.vercel.app/"]

  create-analysed-dreams:
    handler: src/domains/analysedDreams/functions/handler.create
    events:
      - httpApi:
          path: /dreams
          method: POST
          cors:
            origin: ["https://www.useyourdream.com/","https://uyd.vercel.app/"]
  get-analysed-dreams:
    handler: src/domains/analysedDreams/functions/handler.get
    events:
      - httpApi:
          path: /dreams/{id}
          method: GET
  list-analysed-dreams:
    handler: src/domains/analysedDreams/functions/handler.list
    events:
      - httpApi:
          path: /dreams
          method: GET
  del-analysed-dreams:
    handler: src/domains/analysedDreams/functions/handler.del
    events:
      - httpApi:
          path: /dreams/{id}
          method: DELETE

plugins:
  - serverless-esbuild

resources:
  Resources:
    analysedDreams:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: analysedDreams
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        UserPoolName: uyd-user-pool
        UsernameAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: false
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: uyd-user-pool-client
        UserPoolId:
          Ref: UserPool
        GenerateSecret: false
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - https://localhost:3000
        SupportedIdentityProviders:
          - COGNITO
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: login-uyd
        UserPoolId:
          Ref: UserPool
    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        AllowUnauthenticatedIdentities: false
        IdentityPoolName: uyd-identity-pool
        CognitoIdentityProviders:
          [
            {
              ClientId: { Ref: UserPoolClient },
              ProviderName: { "Fn::GetAtt": [UserPool, ProviderName] },
            },
          ]
